---
import {Mail} from '@lucide/astro';
import {Twitter, Linkedin, Github, Bluesky} from './ExtraIcons';
import {Button} from './ui/button';

const iconSizeClass = 'size-10';
const buttonClass =
	" m-0 p-0 size-10 text-primary underline-offset-4 hover:underline inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive";
const toolTipClass =
	'transition-opacity w-max absolute top-0 left-0 bg-primary px-4 py-2 rounded-md bold text-[80%] text-primary-foreground';
---

<div class='flex flex-row items-center gap-8'>
	<div class='mx-auto'></div>
	<button class={buttonClass} id='twitter_btn' aria-describedby='twitter_tooltip'>
		<Twitter className={iconSizeClass} size='64' />
	</button>
	<div class={toolTipClass} id='twitter_tooltip' role='tooltip'>Twitter</div>
	<button class={buttonClass} id='bsky_btn' aria-describedby='bsky_tooltip'>
		<Bluesky className={iconSizeClass} size='64' />
	</button>
	<div class={toolTipClass} id='bsky_tooltip' role='tooltip'>Bluesky</div>
	<button class={buttonClass} id='github_btn' aria-describedby='github_tooltip'>
		<Github className={iconSizeClass} size='64' />
	</button>
	<div class={toolTipClass} id='github_tooltip' role='tooltip'>GitHub</div>
	<button class={buttonClass} id='mailto_btn' aria-describedby='mailto_tooltip'>
		<Mail class={iconSizeClass} size='64' />
	</button>
	<div class={toolTipClass} id='mailto_tooltip' role='tooltip'>Mail</div>
	<button class={buttonClass} id='linkedin_btn' aria-describedby='linkedin_tooltip'>
		<Linkedin className={iconSizeClass} size='64' />
	</button>
	<div class={toolTipClass} id='linkedin_tooltip' role='tooltip'>Linkedin</div>
	<div class='mx-auto'></div>
</div>

<!--Do all the tooltip stuff _after_ the component loads -->
<script>
	import {
		computePosition,
		flip,
		shift,
		type ReferenceElement,
		// type ReferenceElement,
		// type FloatingElement,
	} from '@floating-ui/dom';

	function update(btn: ReferenceElement, tt: HTMLElement) {
		computePosition(btn, tt, {
			placement: 'bottom',
			middleware: [flip(), shift({padding: 5})],
		}).then(({x, y}) => {
			Object.assign(tt.style, {
				left: `${x}px`,
				top: `${y}px`,
			});
		});
	}

	function showTooltip(btn: Element | null, tt: Element | null) {
		// tt.style.display = 'block';
		tt!.style.opacity = '100%';
		update(btn!, tt!);
	}

	function hideTooltip(tt: Element | null) {
		// tt.style.display = 'none';
		tt.style.opacity = '0%';
	}

	const twtBtn = document.querySelector('#twitter_btn');
	const twtTt = document.querySelector('#twitter_tooltip');
	twtBtn?.addEventListener('click', () => window.open('https://twitter.com/_FaceFTW'));

	const bskyBtn = document.querySelector('#bsky_btn');
	const bskyTt = document.querySelector('#bsky_tooltip');
	bskyBtn?.addEventListener('click', () => window.open('https://bsky.app/profile/faceftw.dev'));

	const ghBtn = document.querySelector('#github_btn');
	const ghTt = document.querySelector('#github_tooltip');
	ghBtn?.addEventListener('click', () => window.open('https://github.com/FaceFTW'));

	const mBtn = document.querySelector('#mailto_btn');
	const mTt = document.querySelector('#mailto_tooltip');
	mBtn?.addEventListener('click', () => window.open('https://bsky.app/profile/faceftw.dev'));

	const liBtn = document.querySelector('#linkedin_btn');
	const liTt = document.querySelector('#linkedin_tooltip');
	liBtn?.addEventListener('click', () => window.open('https://www.linkedin.com/in/faceftw'));

	//This is some of the worst typescript stuff I've violated probably
	let arr = [
		{btn: twtBtn, tt: twtTt},
		{btn: bskyBtn, tt: bskyTt},
		{btn: ghBtn, tt: ghTt},
		{btn: mBtn, tt: mTt},
		{btn: liBtn, tt: liTt},
	];
	arr.forEach(({btn, tt}) => {
		[
			{event: 'mouseenter', callback: () => showTooltip(btn, tt)},
			{event: 'mouseleave', callback: () => hideTooltip(tt)},
			{event: 'focus', callback: () => showTooltip(btn, tt)},
			{event: 'blur', callback: () => hideTooltip(tt)},
		].forEach(({event, callback}) => {
			if (btn !== null) {
				btn.addEventListener(event, callback);
			}
		});
	});
</script>
